    反射和泛型
        泛型类的实例无法获取泛型相关的信息，都被擦除了，但是可以通过classes反射来获取相关信息
        泛型类的Class
            Class<T> 本身是个泛型类，不用进行强转了
             String.class -> Class<String> 
        使用Class<T> 作为参数可以匹配对应的类型
            返回确定类型的实例，或者尽情强转
            ex：public static <T> Pair<T> makePair(Class<T> c) throws InstantiationException,
                IllegalAccessException
                {
                return new Pair<>(c.newInstance(), c.newInstance());
                }
        虚拟机中的泛型信息 
            被擦除的泛型类任然保存部分原始类型的信息
            可以通过反射api确定的信息{
                1. 这个泛型是否有一个类型参数T
                2. 这个类型参数是否有一个子类型限制,并且限制本身也是参数类型
                3. 限制类型是否有通配符
                4. 通配符有一个父类限制（super bound）
                5. 泛型方法有一个泛型数组参数
            }
            你可以用这些重新构成泛型类，但是你不知道具体类型。
            java使用Type接口来标识这些信息，这些子类包括{
                1. Class， 描述具体的类型
                2. TypeVariable 描述泛型值 如T extends Comparable<? super T>
                3. WildcardType 描述通配符如 ? super T
                4. ParameterizedType 描述泛型类或者接 如：Comparable<? super T>
                5. GenericArrayType 描述泛型数组 T[]
                jvm 会给除class 的接口生成相应的实例
            }
                // 使用这些信息大英想关的泛型信息，这代码根本就不想打啊
            Type Literals
                想要根据具体类型信息进行不同的方法操作
                针对不同的类型进行不同的字符串格式化，解决方法{
                    1. 新建一个类保存Type 信息，该类的空参够早需要特别处理，可以根据匿名内部类获取泛型具体信息(获取需要特别的api)
                    2. 新建格式化类，其中是用map 保存类型信息和对应的处理方法，这里使用lambda表达式Function<T,R>
                    3. 运行格式化时，获取field 的泛型类型或本身类型进行对应的格式化处理
                    参考代码，用了很多通配符
                    char08 中 GenericReflect （根数field的泛型属性 进行不同的操作，兼容不同的类） 还可以写嵌套，递归
                }
        总结，目前java泛型对我来水还是有点像一个魔法，是泛型类 ，泛型方法， 泛型限定 ，加上通配符 通配符限定 真的太魔鬼，
        目前所要做的就是能够看懂就可以了，写一部分的通用工具类，涉及了非常多类型相关的问题。
        更加详细的内容需要参考：http://angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html （我没看太长了）

char09Collections
    数据结构非常的重要，会影响代码的编码格式（逻辑可读性）和性能。这章是提供java集合架构使用。
    java collections 架构
        开始很小功能有限，在1.2的时候进行了重新设计，但是由于功能的需求和冲突，有很多特异性设计并造成一些争议。（看看）
        分离的集合接口和实现
            queue 接口{
                先进先出
                最简单的接口心事{
                    public interface Queue<E> // a simplified form of the interface in t
                    {
                        void add(E element);
                        E remove();
                        int size();
                    }
                }
                实现的两种方式，一种使用循环数组，一种是链表 自己想可能的实现代码（估计得写）
            }
            由于实现的同一接口多态，可以使用接口接受不同的具体实现，只在获取实例时使用具体类型。
            需要根据不同的情形选择实现，数组的实现效率更高，但是容量受限。
            在jdk 中提供类一些类的Abstract 来方便继承实现具体功能，其中有部分已经实现的功能。
        the collection 接口
            collection classes 的基础接口，包含两个主要方法{
                boolean add(E element);
                Iterator<E> iterator(); // 返回实现Iterator 接口的实例用于遍历集合
            }
            Iterators（迭代器）
                是Collection中的一个属性，不是集合实现的接口
                主要方法{
                    public interface Iterator<E>
                    {
                        E next();
                        boolean hasNext(); // 在next() 调用之前调用
                        void remove(); // 可以移除当前掉过的元素，至少有个next() ,next() 一次次啊能够删除一次
                        default void forEachRemaining(Consumer<? super E> action); // 用于lambda 表达式
                    }
                }
                collection 接口继承了Iterator 接口
                迭代使用的顺序和具体集合有关，是不能预测的。可以确定有没有读完但不能确定到底是什么顺序，有随机顺序的集合。
                Enumeration 被Iterator 替代，因为甘油好的名字（我都在看些啥）
                java中的迭代器和STL是不同的，STL模拟了数组可以用 index 来迭代，java没有模拟，只能使用next(){
                    Instead, think of Java iterators as being between elements. When you call
                    next, the iterator jumps over the next element, and it returns a reference to
                    the element that it just passed (返回跳过的元素)
                }
            实用的泛型方法 
                由于Collection 和Iterator 都是泛型接口，所以可以使用操作任何类型的集合
                ex： contain 方法
                Collection 提供了打不风常用功能，由AbstractCollection提供了打不风的通用功能，但是没有实现size和iterator
                在使用default 后Collection 没有重写AbstractCollection 中实现的方法，只是添加了一些写stream 中用的方法
    Collections架构接口总览
        接口总览
            集合框架拥有两个基本接口 Collection and Map
            List 是有序集合 可以使用迭代器或者索引获取，索引读取是随机获取，因为没有固定的顺序{
                void add(int index, E element 随机获取相关的方法
                void remove(int index)          
                E get(int index)
                E set(int index, E element)
            }
            ListIterator shi Lterator 子类接口 {
                void add(E element) 在迭代位置之前添加一个元素
            }
            java的集合设计对两种不同功能（查询，增删）的有序集合使用的同一个接口。特别是是LinkList的随机访问方法是不必要的{
                可以使用 instanceof RandomAccess 来判断集合算法的实现方式（有屁用）
            }
            set 接口的方法和Collection一致，不过加了更多的定义描述，不能持有相同元素，不同顺序、持有相同元素的集合是相同呃，
            持有相投元素的hashCode 是相同的 {
                新建Set 的主要意义是让方法只接受set相关的集合
            }
            SortedSet and SortedMap接口 包含了用于排序的比较器还定义了可以获取views的方法
            NavigableSet and NavigableMap （1.6）接口包含查询有序set和map的方法是多余的应该塞到上面的接口里面
    Collection相关具体集合实现
        linked lists
            ArraylList使用array 实现的化，新增或者删除有与算法机制花费较高
            LinkedList使用link data 是双重关联的{
                使用链表删除其中一个元素只会影响该元素关联的两个元素
            }
            LinkedList中包含ListIterator 该迭代器添加了 add 方法迭代器位置前添加新的元素{
               E previous() // 可以向前迭代
               boolean hasPrevious()
               迭代器位置是不变的情况使用add添加的，一次添加 a 、 b 后 顺序变为ab 不是（ba）迭代器顺序抱枕不变
            }
                迭代器中的remove 除了和迭代器的位置有关还和状态有关，只能上一次next() 删除左边的，previous删除右边的，刚刚只有的元素
                迭代器中的修改方式{
                    ListIterator<String> iter = list.listIterator();
                    String oldValue = iter.next(); // returns first element
                    iter.set(newValue); // sets first element to newValue // 修改迭代器返回的元素
                }
                在迭代器迭代的过程中，可能其他迭代器对集合发生修改后{
                    迭代器需要察觉这种修改，并是当前迭代失效，
                    java目前是ConcurrentModificationException
                    List<String> list = . . .;
                    ListIterator<String> iter1 = list.listIterator();
                    ListIterator<String> iter2 = list.listIterator();
                    iter1.next();
                    iter1.remove();
                    iter2.next(); // throws ConcurrentModificationException
                }避免并发修改异常，可以建多个只读迭代器，或者一个既可以读也可以写的迭代器
                检测方式是，Collection本身用个数记入每次的增删操作，迭代器本身也会有一个改变记录数，每次迭代前都会
                比较这两个数是否相同。（涉及一些具体实现）
                针对set的改变使用另一套侦测模式
                不要使用其中的 random access method 方法（本质不支持索引）
                java iterator 是计数的可以使用nextIndex 和previousIndex 来获取{
                    可以使用list.listIterator(n) 范湖IDE迭代器替换list.get(n) 来获取更高的效率
                }            
            ArrayList{
                提供迭代器和随机访问两种访问方式
                是将元素雅俗放入一个动态分配的数组之中
                线程不安全但是比Vector 效率高（一般都是单线程操作）
            }
        HashSets{~
            无需去重，可以提供更快的速度来查询某个特定的元素。（通过内置排序算法提高查询速度）
            hash table 就是一种可以快速查询对象的数据结构，hashcode 的结果由对象的成员内容决定

            hash table 储存数据结构的基本了解{
                java中使用 link list 数组来实现hash table
                每个linklist 是一个bucket 用于放元素，元素岔路那个桶由元素模以桶数获取的余数决定。
                但没有元素直接插入，否则需要比较该link list 中的元素来看是否已经存在。
                在桶数足够大的情况向下，这种比较会非常的少。（效率会非常的高）
                在java 中当link list 被装满时会同辉转换成二分树用于改善用于hash值相同带来的大量冲突性能{
                    这里使用的是红黑树的数据结构，一种平衡二叉树，需要满足4个基本特点平衡，会通过变色和旋转来是添加或者删除后的
                    数重新回到平衡，该树平衡比较的快。
                    具体可以参考：https://medium.com/basecs/painting-nodes-black-with-red-black-trees-60eacb2be9a5 
                    讲的很好，还有一些别的平衡二叉树
                }

                为了改善性能需要需要设定适当的桶数，并在hash table 负载超过总容量一定指数的时候（如总量的0.75）
                java 默认的桶数是16，而且每次设定会被修正到2的倍数
                重新生成新的hash table （rehashed） 默认绣着系数是0.75，桶数会变为原来的两倍
            }
            hashset 使用了hashtable 来确保元素的唯一
            hashSet 中的使用iterator 是迭代的hash 桶所以是无序的
            java SetTest < alice30.txt 可以进行转换惊了
        }
        这里又要重读内心稍微有点崩溃
        TreeSet
            treeSet 会保存的顺序，现在的实现是通过红黑树实现的，每个元素会被放在适当的排序位置
            使用treeset 插入会比hashset慢，但也很快{
                选择时不需要顺序的时候使用hash ，需要顺序使用树（一般都不需要）
                使用hash可以使数据混乱，使用tree使用比较方法告诉元素之间的比较区别分类
                对于无法比较的如使用举行面积比较，使用hash就可以了
            }
            奇怪的知识{
                treeset 实现了NavigableSet 提供了一些关于比较的方法
                可以用来获取元素附近最大或者最小的值等
            }                
        Queues and Deques 队列和双端队列
            队列是在尾部添加元素，头部删除元素的数据结构
            双端队列可以在两端删和增加，是一种实现队列和栈数据结构的数据结构
            这两种队列都不可以对中间元素删增
            这两增删都有两种实现方法, 一种实现方法会抛出异常，一种会扔出null，需要注意

        priority Queues （优先队列）
            优先队列会在元素被插入队列后重新检索排序，调用remove方法会返回最小的元素，但不会对所有元素进行排序，
            需要提供对应的比较方法
            这种结构应用有heap{
                A heap is a self-organizing binary tree in which
                the add and remove operations cause the smallest element to gravitate to
                the root, without wasting time on sorting all elements.
            }
            可以用来做job schedule 没词执行优先级最高的任务
            该迭代器不像treeset 访问有序的元素，只在remove时返回最小的元素
    Map (映射关系)
        通过key info获取完整元素信息，map就是这样的key/value 结构
        基础map操作
            提供了hashMap 和TreeMap 两种实现方式，这两种都是针对key 的数据结构，key 和value 的数据结构不是
            map 想要检索元素必须通过key才能检索  
            一些方法{
                getOrDefault() 在key值对应value 不存在时，返回默认值
                put() 相同的key时会替换原有的元素，并返回被替换的元素
                forEach() 使用lambda表达式快速迭代
            }          
        更新map 的问题
            主要是初次更新，返回的就元素为null 的处理
            主要方法{
                1. 使用getOrDefault 来获取值
                2. 使用puIfAbsent 来初始化值
                3. 最简单依据代码使用merge方法，初始化获取值操作一步到位
                counts.merge(word, 1, Integer::sum);
                还有很多和lambda 相关的方法，用来操作key value
            }
        map views （映射视图）
            java 中的collection 框架不把map 视为collection ，可以获取实现collection的view （如KeySet）来操作map
            map中的三种view {
                1. the set of key
                2. the set of key/value pairs 
                3. the collection of value (vaule 本身可以是各种集合)
                Set<K> keySet()
                Collection<V> values()
                Set<Map.Entry<K, V>> entrySet() // Entry 是定义在Map中的接口，第一次见到啊
            }
            需要知道操作keyset 是如何影响map的过程
            通过 Keyset 或者 entryset 删除元素会直接影响map，但是不能进行添加 通过values 获取的元素集合也是
        一些特殊用途的map（了解）
            weak hash map {
                使用弱关联连接key和value，来让gc快速回收
                 gc检测到对象只用弱关联引用，会将其放入回收队列
            }
            linked hash sets and maps
                通过再建立一个元素的linklist 来维护元素之间的顺序
                使用是可以使用随机顺序，也可以使用插入顺序，key，value 都是随机顺序
                插入或者删除都只会影响link list 不会影响hash桶
                LinkedHashMap<K, V>(initialCapacity, loadFactor, true)；
                可以用来删除最近最少使用的元素
                protected boolean removeEldestEntry(Map.Entry<K, V> eldest) 通过重写这个方法实现
            Enumeration Sets and Maps 枚举set 和map
                EnumSet 通过一个有序的bits 来实现 A bit is turned on if the corresponding value is present in the set
                只能使用静态方法进行构造
                EnumMap 是key是枚举的集合通过数组实现，构造时需要声明枚举类型
            identity hash map (标记hash map)
                使用 System.identityHashCode（Object.hashCode） 获取hash值，不会调用重写的hashCode（）
                使用地址值进行比较 所以用 == 
                可以用来遍历算法中用于追踪已经遍历过的对象
    views and wrapper （视图和封装）
        views 是调用返回的一个实现Collection 的集合，并可以通过其的方法操作原有的map或者Collection
        small collection {
            java 9 中 提供了静态方法来获取集合
            List<String> names = List.of("Peter", "Paul", "Mary");
            Set<Integer> numbers = Set.of(2, 3, 5);
            通过实例类型返回相应的类型
            这类集合是不可修改的，想修改可以放入一个集合构造中
            Collections.nCopies(100,"DEFAULT") 可以用来 获取具有相同元素的集合，所有引用指向同一个引用，节省内存
            Arrays.asList 可以获取可以修改单不能添加或者删除的集合
        }
        subranges(子界)
            构成子界views一定数量集合 （都需要有序）
            List<Employee> group2 = staff.subList(10, 20);
            操作subrange 会影响原集合
            java6 添加了对获取子集边界的边界包含不包含的操作
            NavigableSet<E> subSet(E from, boolean fromInclusive, E to, boolean toInclusive)
        不可修改的views
            Collections提供获取不可修改的views的方法
            Collections.unmodifiableCollection 蛮多的，所有的都是定义在接口上，根据传入类型获取实例
            这些接口封装不是真实的集合实例，只能使用接口具有的方法，不能使用传入元素的特有方法
            如LinkedList 中的addFirst 不能在不可修改views使用
            诡异的东西{
                unmodifiableCollection、synchronizedCollection、checkedCollection 中的equals() 和hashCode() 使用的object
                unmodifiableSet、unmodifiableList 使用潜在类型的实现
            }    
        synchronized views (同步视图)
            同步视图，防止多线操作统一个集合的问题
            不使用线程安全的集合而是通过view 的机制来保证线程安全
             Collections.synchronizedMap(new HashMap<String,Employee>())
             里面提供get 和put 操作每个方法必须完成在啊另一个线程调用的时候，可以在多线程并发中卡到
        checked views (检查 views)
            用于debugger可能发生在泛型上的问题
            购将有泛型的类，吧其引用给没泛型的类，就可以插入不满足泛型的数据了，在调用get的时候会报错
            由于泛型擦除机制，不调用get的情况下，可以向List中插入任意类型的数据类型，get类型强转才会报错
            List<String> safeStrings = Collections.checkedList(strings, String.class); 可以这样定义一个类型检查的views
            会检查插入的数据，插入式就检查（感觉也没啥用啊，及时定位吧）
            ArrayList<Pair<String>> 这样的就没法保证了，还有泛型就太难了
        a note on optional operations (可选择操作说明) {
            1. a view通常具有某些限制，来完成目的，只读，不能添加等
            2. 集合中黑多方法被描述为可选择的操作，是为了避免单独定义过多的接口（因为要实现当量的冲突需求，自己的接口不能这么写 ）
        }

    algorithms (算法)
        java集合框架提供了一些算法使用，也可以自己写来使用。
        泛型算法
            只需要实现一次算法，就可以给不同的类使用比较最大值 直接用迭代器进行遍历，找出共同的方法接受Collection<T> 
            提高通用性，算法通用性。
        排序和打乱
            排序默认调用实现的比较方法，否则需要自己传入比较方法
            Comparator.comparingDouble(Employee::getSalary)
            staff.sort(Comparator.reverseOrder())  // 这两种获取的都是反向排序
            对于链表排序{
                需要时用混合排序，因为不具备有随机访问的能力，java做法是复制到数组中然后进行排序
                collections 中的排序算法比快速排序慢，但是是稳定不需要选择特定相等元素
            }
            可以用于排序的集合条件{
                1. A list is modifiable if it supports the set method.
                2. A list is resizable if it supports the add and remove operations.
            }
            shuffle 需要随机打乱顺序{
                如果没有实现RandomAccess 接口会将其复制到数组中，然后打乱后再复制回去
            } 
        二分查找
            对于排过序的查找可以使用二分查找法（效率极高）           
            必须是实现List接口并排过序
            二分法返回正数是该元素输出位置，负数取反 - 1 可以得到插入不影响排序的位置
            二分法依赖radom access  使用linked list 查找 会导致使用迭代器从头遍历到中间，算法复杂度会变成线型
            linkedList 使用的是线下搜索
        一些简单但是实用的算法
            {
                找寻最大值
                赋值集合到另一个集合
                使用一个值填满集合
                反转集合
            }
            方法的封装是为了更好的效率，和可读性和复用性
            words.removeIf(w -> w.length() <= 3);
            words.replaceAll(String::toLowerCase); 提供了一些方便的方法
        批量处理
            集合中的批量处理，不要自己写loop了
            coll1.removeAll(coll2);
            coll1.retainAll(coll2); // 找到共有的元素
            通过操作view 可以批量操作collection 或者map 
        collection 和 array 的互相转换
            String[] values = staff.toArray(new String[0]); // 只能这样特定类的数组，否则一律就是Object[] 且不能进行强转
            如果规定相同呃数组长度，就不会穿凿新的数组。
            不直接丢类型的原因是不能让他额外完成新建数组的功能，感觉实在逗我。
        为Collection写一些自己的algorithm
            写方法是接受的最好是通用Collection 最好就是借口Collection 提高通用性
            如果这是迭代操作还可以接受Iterable借口，collection 继承了该接口
            不使用Collection 作为接口参数和返回的方法，是因为在集合方法之前存在（冷笑话呃）
    集合框架之前遗留的集合
        已经被整合到java 集合框架中了，不建议使用（看看就的了）
        hashtable {
            和hashMap 本质是相同的接口，但是是同步的。
            如果为了兼容捞代码可以使用，否则应对并发使用ConcurrentHashMap 类。
        }
        Enumerations{
            旧有用于检索顺序的数据，可以使用Collection.list转换为arrayList
            java9 中有别的操作，我估计用不到
            是java1.2 子集合框架出现前的通用集合（不该遇到吧）
        }
        property maps（属性集合） {
            1. key 和value 都是String
            2. 这map可以方便的存储为文件或者从文件中加载
            3. 有第二张表用于存放默认值
            使用 Properties 类实现，一般是存储配置文件可以store 和load
            该类实现的Map(Object,Object) 使用get、put处理的是Object
            System.getProperty("user.home") 可以用于获取系统信息（我都不知道获取什么信息）

            两种给默认值方法{
                1. String filename = settings.getProperty("filename", "");
                2. var settings = new Properties(defaultSettings); // 先存值到一个Properties 中在吧器作物参数放在构造中
                就产生第二张表作为默认值（貌相好多配置都可以这样干） 还可以给默认指定默认，什么鬼东西
            }

            java 9 之前使用的是7-bit ASCII 编码 后改用 8-bit
            properties没有复杂的层级关系，复杂的层级关系应该使用Preferences 类            
        }
        stacks
            不完全满足栈结构可以在任意位置添加或者删除
        bit Sets
            用存储一序列bits，使用者可以直接操作对应的bit从而避免操作其他bit 如果用bit保存int 或者long值
            保存的是true false 比List<Boolean> 效率高，操作的单位太小了啊
            来个例子找素数一种算法，可以用来测试编译操作bit 能力

            例如找到2 - 2,000,000 所有素数 是个诡异的算法
            可以参考char09.BitSetTest 速度挺快的{ //放弃西靠
                1. First, we turn on all the bits.
                2. After that,we turn off the bits that are multiples of numbers known to be prime. 
                3. The positions of the bits that remain after this process are themselves primenumbers.
            } 不优化的化c++ 运行还不如java 优化后会领先
char10 图形用户接口编程（看看）
    看java做的傻屌桌面程序，开心开心
    java 用户几口工具集历史
        1.0 Abstract Window Toolkit (AWT)  调用目标平台本身的toolkit
         使用不同平台的工具具有很大差别，不很写出高度统一的软件
         导致 write once, debug everywhere. （不同平台会有不同的bug）

        java 1.1 扩展开始基于Netscape 的ifc 实现的swing 通过接口元素来保证不同平台的运行效果是一致的
        swing 是基于awt特别是时间触发{
            说swing就是意味着界面绘画工作
            说awt 是将的底层时间触发机制
        }
        swing 还是不计较的慢的，要绘制用户界面的每个像素。
        反正又丑又落后Adobe Flash  的出现更难了，虽然flash 也被淘汰了
        JavaFX 运行在vm上不过需要学新的语言，2011 javaFX2 整合到了jdk上了 ，java11 又不要了，真的是个废物
    Displaying Frames （显示画面）
        不被其他window包含的window在java中叫做frame，是最高级的window
        是swing 无法操作的部分，使用的组件是系统自带的，用J 开口的组件是swing 中的另一种不是，两者最好不好混合使用
        创建Frame{
            所有的swing组件都需要一个时间派发线程（ the event dispatchthread）
            参考：char10.FrameTest
            这里使用 EventQueue.invokeLater() 来新建线程
            需要选择组件的默认退出方式 // 不设置不会关闭程序在swing中
            普通构造的frame 需要设置可见才会可见，之间可以进行组件的加载
            main 线程完成初始化后就会结束 由 event dispatcher线程确保程序运行，调用System.exit() 结束进程
            frame样式由系统决定，里面内容由swing决定
        }
        frame的属性{
            1. setLocation、setBounds 来设置位置 setBounds 还可以设置大小
            2. setIconImage 用于设置展示的icon
            3. setTitle 设置标题栏
            4. setResizable 是否可以被用户重定义大小
        }   Component 是所有鬼类的父类
            a Property 有名字或者类型 有一队get/set方法组成
            如何真确的设置属性{
                1. 通过getDefaultToolkit 获取Toolkit 对象（和窗口系统连接），可以获取窗口大小
                2. 通过获取的Dimension 信息，设置适宜的frame 大小比例
                3. 可以是用setImageCorn 来设置图标
                4. 可以使用setLocationByPlatform 来设置合适位置
            }
    在frame中展示信息
        frame 分为四层root pane, layered pane, and glass pane，我们在content pane中放置组件
        放置组件示例 {
            使用继承JComponent并重写paintComponent来放置图片或者文本
            当window刷新是会调用所有组价你的paintComponent 方法
            可以操作Graphics 类型用于绘制具体的类型，java中所有的绘制通过该类
            paintComponent 是自动调用在redrawn的时候，不能收懂调用该方法
        }
        页面重新刷新有很多种情况，都会重新运行整个代码，也可以通过repaint重新调用。
        在frame初始化的时候就把组件加进去，可以在组件中定义组件需要的frame大小通过pack使用
        没法使用居中char10.FrameTest。
        大部分组件添加刷新都是在frame 构造冲完成的，没这样写过代码
    working with 2d shapes我也好画图了吗
        可以是用java 2d lib 来操作2d图形 有Line2D，Rectangle2D 等通过Graphics2D操作
        图像都是继承Shape 类由，draw() 方法调用
        图像计算使用单精度浮点数，在华珍为零的过程中可能产生一像素的误差但不影响显示
        不过因为java默认的是爽精度的double所以需要进行但进度的强转
        float f = (float) r.getWidth(); // OK java 提供了两种精度的坐标使用
        实现是通过两个静态内部类实现的 只是为了取名的原因呃
        new Rectangle2D.Double(10.0, 25.0, 22.5,20.0); 这样获取双精度坐标的三角形
        Rectangle2D 方法返回的是爽进度，即使用单精度构建的，坑爹啊。
        想我用单精度省内存不可能，加内存不会啊。

        Point2D{
            用来显示点，感觉怪怪的
            Ellipse2D 继承自Rectangle2D 图形（感觉我根本不会设计），椭圆有矩形的边距
            java每次新功能都会对旧有jdk进行兼容，真的牛匹
        }
        矩形和椭圆的构造{
            1.The x and y coordinates of the top left corner; // 矩形的左上角
            2.The width and heigh
            可以调用setFrameFromCenter ，setFrame 来构建椭圆或者圆，矩形是这两的基本画布，这个坐标有点有点怪异
        }
        使用颜色
            使用setPaint 可以是graphics draw的东西带有颜色，可以调用fill来填充内院颜色
            可以使用对应的rgb来创建需要的颜色（我感觉你在为难我这个色盲）            
            可以通过setBackground 来设置背景颜色 setForeground 可以设置默认组件颜色
        使用字体
            GraphicsEnvironment 中的本地环境getAvailableFontFamilyNames() 获取可以使用的字体
            默认有5种字体Oracle 的jdk 有加了3种
            每inch有72个点{
                plain, bold, italic, or bold italic 字体格式可以和字体名称一起使用
                deriveFont 可以单独设定字体大小
                font 构造第一个int是样式 ，后一个是大小
            }
            想要文字居中{
                有方法可以直接获取组件的所处frame大小，从而保证位置的一致性    
                有个很重要的事，frame 里面的y轴是朝下的，所以用+ 日狗了

                1. 所用文字font
                2. 文本本身
                3. 显示文字的设备
                通过g2.getFontRenderContext()  ，font.getStringBounds 可以获取一个放置文本的矩形和文本大小一致，用于文字的排版
                决定矩形大小的因素{
                    一行的高度有三部分 组成{
                        ascent(基线上半部分)
                        descent(基线下半部分)
                        leading(descent到下一行ascent之间的距离)                    
                    }
                    水平范围长度可以通过getStringBounds 获取 可以通过StringBounds 获取相关的信息
                    double ascent = -bounds.getY(); 这是负的呃，矩形的坐标呃
                    getLineMetrics 获取对象从而获取descent和leading
                }
                不在paintComponent 方法中使用JComponent getFontMetrics getFontRenderContext来进行布局
            }
        展示图片（感觉可以了）
            ImageIcon 可以获取缩率图，可以用来制作秘籍恐惧症的图
            出现鼠标悬停出现白线的问题




    







